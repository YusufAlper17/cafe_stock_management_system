### src/controllers/sales.controller.js ###

const getSalesHistory = async (req, res) => {
    try {
        const store_id = req.user.store_id;
        let { startDate, endDate } = req.query;

        console.log('Starting getSalesHistory:', {
            user: req.user,
            store_id,
            startDate,
            endDate,
            currentTime: new Date().toLocaleString('tr-TR', { timeZone: 'Europe/Istanbul' })
        });

        // If only startDate is provided, use it as endDate too
        if (startDate && !endDate) {
            endDate = startDate;
        }

        const whereClause = { store_id };

        if (startDate && endDate) {
            try {
                // Parse dates and set proper time ranges
                const startDateTime = new Date(startDate);
                startDateTime.setUTCHours(0, 0, 0, 0);
                startDateTime.setTime(startDateTime.getTime() - (3 * 60 * 60 * 1000)); // UTC+3 için düzeltme

                const endDateTime = new Date(endDate);
                endDateTime.setUTCHours(23, 59, 59, 999);
                endDateTime.setTime(endDateTime.getTime() - (3 * 60 * 60 * 1000)); // UTC+3 için düzeltme

                console.log('Date range for query:', {
                    startDateTime: startDateTime.toISOString(),
                    endDateTime: endDateTime.toISOString(),
                    startLocal: startDateTime.toLocaleString('tr-TR', { timeZone: 'Europe/Istanbul' }),
                    endLocal: endDateTime.toLocaleString('tr-TR', { timeZone: 'Europe/Istanbul' })
                });

                // Use date comparison for Turkish time
                whereClause.date = {
                    [Op.gte]: startDateTime,
                    [Op.lte]: endDateTime
                };
            } catch (dateError) {
                console.error('Error parsing dates:', dateError);
                return res.status(400).json({
                    success: false,
                    message: 'Geçersiz tarih formatı!'
                });
            }
        }

        // Log the query we're about to execute
        console.log('Query conditions:', JSON.stringify(whereClause, null, 2));

        // Get sales with product information
        const sales = await Sale.findAll({
            where: whereClause,
            include: [{
                model: Product,
                attributes: ['name', 'cost_price']
            }],
            order: [['date', 'DESC']]
        });

        console.log(`Found ${sales.length} sales for the specified period`);

        // Log all sales dates for debugging
        console.log('All sales dates:', sales.map(sale => ({
            id: sale.id,
            date: sale.date,
            localDate: new Date(sale.date).toLocaleString('tr-TR', { timeZone: 'Europe/Istanbul' })
        })));

        // Format sales data
        const formattedSales = sales.map(sale => {
            const saleData = sale.get({ plain: true });
            const quantity = Number(saleData.quantity) || 0;
            const price = Number(saleData.price) || 0;
            const costPrice = Number(saleData.Product?.cost_price) || 0;
            
            return {
                id: saleData.id,
                date: saleData.date,
                localDate: new Date(saleData.date).toLocaleString('tr-TR', { timeZone: 'Europe/Istanbul' }),
                quantity: quantity,
                price: price,
                total: quantity * price,
                profit: (price - costPrice) * quantity,
                items: [{
                    product_name: saleData.Product?.name || 'Bilinmeyen Ürün',
                    quantity: quantity,
                    price: price
                }]
            };
        });

        // Calculate summary
        const summary = formattedSales.reduce((acc, sale) => {
            acc.total_sales += Number(sale.total) || 0;
            acc.total_profit += Number(sale.profit) || 0;
            acc.total_transactions += 1;
            return acc;
        }, {
            total_sales: 0,
            total_profit: 0,
            total_transactions: 0
        });

        const response = {
            success: true,
            message: formattedSales.length > 0 
                ? 'Satış geçmişi başarıyla getirildi!' 
                : 'Seçilen tarih aralığında satış verisi bulunamadı.',
            sales: formattedSales,
            summary: {
                ...summary,
                average_basket: summary.total_transactions > 0 
                    ? summary.total_sales / summary.total_transactions 
                    : 0
            }
        };

        console.log('Sending response with sales count:', formattedSales.length);

        res.json(response);
    } catch (error) {
        console.error('Error in getSalesHistory:', error);
        console.error('Error stack:', error.stack);
        res.status(500).json({
            success: false,
            message: 'Satış geçmişi getirilirken hata oluştu!',
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
}

### public/js/reports.js ###

// Global chart instances
let salesChart = null;
let topProductsChart = null;

// Initialize page
document.addEventListener('DOMContentLoaded', () => {
    const auth = Auth.checkAuth();
    if (!auth) {
        showAlert('Oturum bulunamadı!', 'danger');
        return;
    }

    // Set default date range (today)
    const today = new Date();
    const todayStr = formatDateToISO(today);

    // Set both start and end date to today
    document.getElementById('startDate').value = todayStr;
    document.getElementById('endDate').value = todayStr;

    // Initialize charts
    initializeCharts();

    // Load initial data
    loadReports();

    // Setup event listeners
    setupEventListeners();
});

// Helper function to format date to YYYY-MM-DD
function formatDateToISO(date) {
    // Convert to Turkish time
    const turkishDate = new Date(date.getTime() + (3 * 60 * 60 * 1000));
    const year = turkishDate.getUTCFullYear();
    const month = String(turkishDate.getUTCMonth() + 1).padStart(2, '0');
    const day = String(turkishDate.getUTCDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Helper function to format date for display
function formatDateForDisplay(date) {
    return new Date(date).toLocaleString('tr-TR', {
        timeZone: 'Europe/Istanbul',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// Load reports data
async function loadReports() {
    try {
        const auth = Auth.checkAuth();
        if (!auth) {
            console.error('Auth not found');
            showAlert('Oturum bulunamadı!', 'danger');
            return;
        }

        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        if (!startDate || !endDate) {
            console.error('Invalid date range:', { startDate, endDate });
            showAlert('Lütfen geçerli bir tarih aralığı seçin!', 'warning');
            return;
        }

        // Validate date range
        const start = new Date(startDate);
        const end = new Date(endDate);
        
        if (start > end) {
            showAlert('Başlangıç tarihi bitiş tarihinden sonra olamaz!', 'warning');
            return;
        }

        // Show loading state
        setLoadingState(true);

        console.log('Fetching sales data...', { 
            startDate, 
            endDate,
            startLocal: start.toLocaleString(),
            endLocal: end.toLocaleString()
        });

        const response = await fetch(`/api/sales/history?startDate=${startDate}&endDate=${endDate}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${auth.token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('API Error:', { status: response.status, body: errorText });
            throw new Error(`Veri yüklenirken hata oluştu: ${response.status}`);
        }

        const data = await response.json();
        console.log('Received sales data:', {
            success: data.success,
            salesCount: data.sales?.length,
            summary: data.summary
        });

        if (!data.success) {
            console.error('API returned error:', data);
            throw new Error(data.message || 'Veri alınamadı');
        }

        if (!data.sales || !Array.isArray(data.sales)) {
            console.error('Invalid sales data format:', data);
            throw new Error('Geçersiz veri formatı');
        }

        if (data.sales.length === 0) {
            console.log('No sales data found for the selected period');
            resetUI();
            showAlert('Seçilen tarih aralığında satış verisi bulunamadı.', 'info');
            return;
        }

        console.log('Processing sales data...');
        const processedData = processReportData(data.sales);
        window.currentChartData = processedData;

        // Update UI components
        updateCharts(processedData);
        updateSummaryCards(data.summary);
        displaySalesTable(data.sales);

        console.log('Reports updated successfully');

        // Update quick filter states
        updateQuickFilterStates();

    } catch (error) {
        console.error('Error in loadReports:', error);
        showAlert(`Veri yüklenirken hata oluştu: ${error.message}`, 'danger');
        resetUI();
    } finally {
        setLoadingState(false);
    }
}

// Process report data
function processReportData(sales) {
    if (!Array.isArray(sales) || sales.length === 0) {
        return {
            daily_sales: [],
            top_products: [],
            summary: {
                total_sales: 0,
                total_profit: 0,
                total_orders: 0,
                average_basket: 0
            }
        };
    }

    // Group sales by date
    const salesByDate = {};
    const productStats = {};
    let totalSales = 0;
    let totalProfit = 0;

    sales.forEach(sale => {
        try {
            // Ensure all numeric values are properly converted
            const saleTotal = Number(sale.total) || 0;
            const saleProfit = Number(sale.profit) || 0;
            
            // Format date consistently in Turkish time
            const saleDate = new Date(sale.date);
            const date = formatDateForDisplay(saleDate).split(',')[0]; // Get only the date part
            
            // Daily sales
            if (!salesByDate[date]) {
                salesByDate[date] = { total: 0, profit: 0, count: 0 };
            }
            salesByDate[date].total += saleTotal;
            salesByDate[date].profit += saleProfit;
            salesByDate[date].count++;

            // Product stats
            if (Array.isArray(sale.items)) {
                sale.items.forEach(item => {
                    const productName = item.product_name || 'Bilinmeyen Ürün';
                    if (!productStats[productName]) {
                        productStats[productName] = { total_quantity: 0, total_revenue: 0 };
                    }
                    const quantity = Number(item.quantity) || 0;
                    const price = Number(item.price) || 0;
                    productStats[productName].total_quantity += quantity;
                    productStats[productName].total_revenue += quantity * price;
                });
            }

            // Totals
            totalSales += saleTotal;
            totalProfit += saleProfit;
        } catch (error) {
            console.error('Error processing sale:', error, sale);
        }
    });

    // Format daily sales
    const daily_sales = Object.entries(salesByDate)
        .map(([date, data]) => ({ 
            date, 
            total: Number(data.total) || 0,
            profit: Number(data.profit) || 0,
            count: Number(data.count) || 0
        }))
        .sort((a, b) => {
            const dateA = new Date(a.date.split(' ').reverse().join(' '));
            const dateB = new Date(b.date.split(' ').reverse().join(' '));
            return dateA - dateB;
        });

    // Format top products
    const top_products = Object.entries(productStats)
        .map(([product_name, stats]) => ({ 
            product_name, 
            total_quantity: Number(stats.total_quantity) || 0,
            total_revenue: Number(stats.total_revenue) || 0
        }))
        .sort((a, b) => b.total_revenue - a.total_revenue)
        .slice(0, 5);

    return {
        daily_sales,
        top_products,
        summary: {
            total_sales: Number(totalSales) || 0,
            total_profit: Number(totalProfit) || 0,
            total_orders: sales.length,
            average_basket: sales.length > 0 ? Number(totalSales / sales.length) || 0 : 0
        }
    };
}

// Update charts
function updateCharts(data) {
    if (!data || !data.daily_sales || !data.top_products) {
        console.error('Invalid chart data:', data);
        return;
    }

    try {
        // Update sales chart
        if (salesChart) {
            const selectedParam = document.getElementById('chartParam').value;
            
            salesChart.data.labels = data.daily_sales.map(item => item.date);
            salesChart.data.datasets = [];

            if (selectedParam === 'all' || selectedParam === 'sales') {
                salesChart.data.datasets.push({
                    label: 'Satış',
                    data: data.daily_sales.map(item => Number(item.total) || 0),
                    borderColor: '#4f46e5',
                    backgroundColor: '#4f46e520',
                    fill: true,
                    tension: 0.4,
                    pointStyle: 'circle',
                    pointRadius: 4,
                    pointHoverRadius: 6
                });
            }

            if (selectedParam === 'all' || selectedParam === 'profit') {
                salesChart.data.datasets.push({
                    label: 'Kar',
                    data: data.daily_sales.map(item => Number(item.profit) || 0),
                    borderColor: '#10b981',
                    backgroundColor: '#10b98120',
                    fill: true,
                    tension: 0.4,
                    pointStyle: 'circle',
                    pointRadius: 4,
                    pointHoverRadius: 6
                });
            }
        }
    } catch (error) {
        console.error('Error updating charts:', error);
    }
}

// Display sales table
function displaySalesTable(sales) {
    const tbody = document.getElementById('salesTableBody');
    if (!tbody) return;

    tbody.innerHTML = '';

    if (!Array.isArray(sales)) {
        console.error('Sales data is not an array:', sales);
        return;
    }

    // Sort sales by date in descending order (newest first)
    const sortedSales = [...sales].sort((a, b) => new Date(b.date) - new Date(a.date));

    sortedSales.forEach(sale => {
        try {
            const tr = document.createElement('tr');
            
            tr.innerHTML = `
                <td>${formatDateForDisplay(sale.date)}</td>
                <td>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-primary rounded-pill me-2">${Array.isArray(sale.items) ? sale.items.length : 0}</span>
                        ${Array.isArray(sale.items) ? sale.items.map(item => item.product_name || 'Bilinmeyen Ürün').join(', ') : ''}
                    </div>
                </td>
                <td>${(Number(sale.total) || 0).toFixed(2)} ₺</td>
                <td><span class="text-success">+${(Number(sale.profit) || 0).toFixed(2)} ₺</span></td>
                <td>
                    <button class="btn btn-sm btn-outline-primary" onclick="openSaleDetails(${JSON.stringify(sale).replace(/"/g, '&quot;')})">
                        <i class="bi bi-eye"></i>
                    </button>
                </td>
            `;

            tbody.appendChild(tr);
        } catch (error) {
            console.error('Error displaying sale row:', error, sale);
        }
    });
}

// Export sales data
function exportSalesData() {
    if (!window.currentChartData) return;

    const data = window.currentChartData;
    let csv = 'Tarih,Toplam Satış,Kar,Satış Adedi\n';
    
    data.daily_sales.forEach(day => {
        csv += `${day.date},${day.total},${day.profit},${day.count}\n`;
    });

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'satis_raporu.csv';
    link.click();
}

// Open sale details modal
function openSaleDetails(sale) {
    const tbody = document.getElementById('saleDetailsTableBody');
    tbody.innerHTML = '';

    sale.items.forEach(item => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${item.product_name}</td>
            <td>${item.quantity}</td>
            <td>${item.price.toFixed(2)} ₺</td>
            <td>${(item.quantity * item.price).toFixed(2)} ₺</td>
        `;
        tbody.appendChild(tr);
    });

    const subtotal = sale.total / 1.18;
    const tax = sale.total - subtotal;

    document.getElementById('saleSubtotal').textContent = `${subtotal.toFixed(2)} ₺`;
    document.getElementById('saleTax').textContent = `${tax.toFixed(2)} ₺`;
    document.getElementById('saleTotal').textContent = `${sale.total.toFixed(2)} ₺`;

    const modal = new bootstrap.Modal(document.getElementById('saleDetailsModal'));
    modal.show();
}

### src/controllers/report.controller.js ###

const db = require('../models');
const Sale = db.Sale;
const Product = db.Product;
const Archive = db.Archive;

exports.getSalesReport = async (req, res) => {
    try {
        const sales = await Sale.findAll({
            include: [{
                model: Product,
                attributes: ['product_name', 'cost_price', 'sale_price']
            }]
        });

        const report = {
            total_sales: sales.length,
            total_revenue: sales.reduce((sum, sale) => sum + sale.sale_price * sale.quantity, 0),
            sales: sales
        };

        res.json(report);
    } catch (error) {
        res.status(500).json({
            message: "Satış raporu oluşturulurken hata oluştu!",
            error: error.message
        });
    }
};

exports.getStockReport = async (req, res) => {
    try {
        const products = await Product.findAll({
            attributes: ['id', 'product_name', 'stock_qty', 'cost_price', 'sale_price']
        });

        const report = {
            total_products: products.length,
            total_stock_value: products.reduce((sum, product) => sum + product.cost_price * product.stock_qty, 0),
            products: products
        };

        res.json(report);
    } catch (error) {
        res.status(500).json({
            message: "Stok raporu oluşturulurken hata oluştu!",
            error: error.message
        });
    }
};

### public/reports.html ###

<!-- Sidebar -->
<div class="sidebar">
    <ul class="sidebar-menu">
        <li>
            <a href="/sales.html" class="sidebar-menu-item">
                <i class="bi bi-cart3"></i>Satış
            </a>
        </li>
        <li>
            <a href="/stock.html" class="sidebar-menu-item">
                <i class="bi bi-box-seam"></i>Stok Yönetimi
            </a>
        </li>
        <li>
            <a href="/reports.html" class="sidebar-menu-item active">
                <i class="bi bi-graph-up"></i>Raporlar
            </a>
        </li>
    </ul>
</div>

<!-- Summary Cards -->
<div class="row g-4 mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="card-subtitle text-muted mb-1">Toplam Satış</h6>
                        <h3 class="card-title mb-0" id="totalSales">0.00 ₺</h3>
                    </div>
                    <div class="bg-primary bg-opacity-10 rounded-circle p-3">
                        <i class="bi bi-cart3 text-primary fs-4"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="card-subtitle text-muted mb-1">Toplam Kar</h6>
                        <h3 class="card-title mb-0" id="totalProfit">0.00 ₺</h3>
                    </div>
                    <div class="bg-success bg-opacity-10 rounded-circle p-3">
                        <i class="bi bi-graph-up-arrow text-success fs-4"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row g-4 mb-4">
    <!-- Sales Chart -->
    <div class="col-lg-8">
        <div class="card h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="card-title mb-0">Günlük Satış Grafiği</h5>
                    <div class="d-flex gap-2 align-items-center">
                        <select id="chartParam" class="form-select form-select-sm" style="width: auto;">
                            <option value="all">Tümü</option>
                            <option value="sales">Sadece Satış</option>
                            <option value="profit">Sadece Kar</option>
                            <option value="count">Sadece Satış Adedi</option>
                        </select>
                    </div>
                </div>
                <div style="height: 300px;">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Sales History -->
<div class="card">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="card-title mb-0">Satış Geçmişi</h5>
            <button class="btn btn-sm btn-outline-primary" id="exportSales">
                <i class="bi bi-download me-1"></i>
                Dışa Aktar
            </button>
        </div>
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead>
                    <tr>
                        <th>Tarih</th>
                        <th>Ürünler</th>
                        <th>Toplam</th>
                        <th>Kar</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody id="salesTableBody">
                    <!-- Sales will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Sale Details Modal -->
<div class="modal fade" id="saleDetailsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Satış Detayı</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Ürün</th>
                                <th>Miktar</th>
                                <th>Birim Fiyat</th>
                                <th>Toplam</th>
                            </tr>
                        </thead>
                        <tbody id="saleDetailsTableBody">
                            <!-- Sale details will be populated by JavaScript -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Ara Toplam:</td>
                                <td class="fw-bold" id="saleSubtotal">0.00 ₺</td>
                            </tr>
                            <tr>
                                <td colspan="3" class="text-end">KDV (18%):</td>
                                <td id="saleTax">0.00 ₺</td>
                            </tr>
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Toplam:</td>
                                <td class="fw-bold" id="saleTotal">0.00 ₺</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="printSaleDetails">
                    <i class="bi bi-printer me-2"></i>Yazdır
                </button>
            </div>
        </div>
    </div>
</div>

